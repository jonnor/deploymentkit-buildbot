# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

from passwords import passwd

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [
	BuildSlave("archlinux-i686", passwd['slaves']),
	BuildSlave("archlinux-x86_64", passwd['slaves']),
	BuildSlave("debian-5.0-x86_64", passwd['slaves']),
]

c['slavePortnum'] = 9987

####### CHANGESOURCES

giturl_deploymentkit = 'git://github.com/jonnor/deploymentkit.git'

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = GitPoller(
        giturl_deploymentkit,
        workdir='gitpoller-deploymentkit', branch='master',
        pollinterval=300)

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=30,
                            builderNames=["deploymentkit-unittests", "deploymentkit-sdist", 
"deploymentkit-archlinux-example-babl", "deploymentkit-archlinux-example-massifg"]))

####### BUILDERS

c['builders'] = []


from buildbot.process.factory import BuildFactory
from buildbot.steps.source import git
from buildbot.steps import shell, transfer

# Checkout source, run unittests
factory = BuildFactory()
factory.addStep(git.Git(repourl=giturl_deploymentkit, mode='full', method='fresh'))
factory.addStep(shell.Test(command=["nosetests"]))

from buildbot.config import BuilderConfig

c['builders'].append(
    BuilderConfig(name="deploymentkit-unittests",
      slavenames=["debian-5.0-x86_64"],
      factory=factory))

# Checkout source, create source tarball, 
factory = BuildFactory()
factory.addStep(git.Git(repourl=giturl_deploymentkit, mode='full', method='fresh'))
factory.addStep(shell.ShellCommand(name='tarball create', command=["python", "setup.py", "sdist"]))
factory.addStep(transfer.FileUpload(slavesrc="dist/DeploymentKit-0.0.1.tar.gz", 
masterdest="./public_html/tarballs/deploymentkit-0.0.1.tar.gz"))

c['builders'].append(
    BuilderConfig(name="deploymentkit-sdist",
      slavenames=["debian-5.0-x86_64"],
      factory=factory))


# Checkout source, run babl example build test
factory = BuildFactory()
factory.addStep(git.Git(repourl=giturl_deploymentkit, mode='full', method='fresh'))
factory.addStep(shell.Test(name="test babl example", command=["examples/test.sh", "gnulinux-archlinux-current-x86_64", "all", 
"babl"]))

c['builders'].append(
    BuilderConfig(name="deploymentkit-archlinux-example-babl",
      slavenames=["archlinux-x86_64"],
      factory=factory))

# Checkout source, run massifg example build test
factory = BuildFactory()
factory.addStep(git.Git(repourl=giturl_deploymentkit, mode='full', method='fresh'))
factory.addStep(shell.Test(name="test massifg example", command=["examples/test.sh", "gnulinux-archlinux-current-x86_64", "all",
"massifg"]))

c['builders'].append(
    BuilderConfig(name="deploymentkit-archlinux-example-massifg",
      slavenames=["archlinux-x86_64"],
      factory=factory))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

c['title'] = "DeploymentKit"
c['titleURL'] = "http://www.deploymentkit.org"
c['buildbotURL'] = "http://build.deploymentkit.org"

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

